/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.63
 * Generated at: 2021-02-25 01:58:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ReservationSection_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    ");

 // 로그인 세션
 	String id = (String)session.getAttribute("id");
	String res_room = request.getParameter("res_room");
	String res_cost = request.getParameter("res_cost");
    
      out.write("\r\n");
      out.write("    \r\n");
      out.write("<nav id=\"Content\">\r\n");
      out.write("\t");
/* 로그인 세션 체크를 통해 로그인이 안된 경우 로그인 페이지로 넘어가기 */
	if (session.getAttribute("id") == null) { //세션연결된 id가 없는 경우 null
	
      out.write("\r\n");
      out.write("\t\t\t<a href=\"로그인세션.jsp\">로그인하기</a>\r\n");
      out.write("\r\n");
      out.write("\t\t\t");
} else {
      out.write("<!-- 로그인 세션이 유지된 경우 아래와 같이 결제 창 실행 -->\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t<div id=\"Reservationleft\">\r\n");
      out.write("\t\t<p class = \"a\">예약자정보</p>\r\n");
      out.write("\t\t<div id=\"leftbox\">\r\n");
      out.write("\t\t<!-- 예약정보를 다 작성하고 예약버튼을 눌러 정보를 예약테이블에 insert해주는 db처리 페이지로 넘겨준다 -->\r\n");
      out.write("\t\t<form action=\"ReservationCreateDB.jsp\" id = \"reservationform\"> \r\n");
      out.write("\t\t\t사용자 아이디<br> \r\n");
      out.write("\t\t\t<input name=\"res_id\" value=");
      out.print(session.getAttribute("id"));
      out.write(" readonly=\"readonly\"><br><!-- readonly : 수정 불가 읽기만 가능 -->\r\n");
      out.write("\t\t\t예약자 이름<br> \r\n");
      out.write("\t\t\t<input name=\"res_name\" required=\"required\"><br><!-- required : 반드시 채워야함 -->\r\n");
      out.write("\t\t\t예약자 전화번호<br> \r\n");
      out.write("\t\t\t<input name=\"res_tel\" required=\"required\"><br>\r\n");
      out.write("\t\t\t예약일 <br> \r\n");
      out.write("\t\t\t<input type=\"date\" name=\"res_date\" required=\"required\"><br>\r\n");
      out.write("\t\t\t결제방식<br> \r\n");
      out.write("\t\t\t<input type=\"radio\" name=\"res_payment\" value=\"place\" required=\"required\">현장결제 \r\n");
      out.write("\t\t\t<input type=\"radio\" name=\"res_payment\" value=\"card\" required=\"required\">카드결제<br> \r\n");
      out.write("\t\t\t<input type=\"radio\" name=\"res_payment\" value=\"transfer\" required=\"required\">계좌이체 \r\n");
      out.write("\t\t\t<input type=\"radio\" name=\"res_payment\" value=\"phone\" required=\"required\">휴대폰결제<br>\r\n");
      out.write("\t<div id=\"Reservationright\">\r\n");
      out.write("\t\t<p class = \"a\">숙소정보/가격정보</p><br>\r\n");
      out.write("\t\t<div id=\"rightbox\">\r\n");
      out.write("\t\t<!-- 위에 자바소스 부분에서 상품이름 상품가격을 받아와서 화면에 보여준다. -->\r\n");
      out.write("\t\t숙소이름<br>\r\n");
      out.write("\t\t\t\t<input type =\"hidden\" name = \"res_room\" value =");
      out.print(res_room);
      out.write(">\r\n");
      out.write("\t\t\t\t");
      out.print(res_room);
      out.write(" \t\r\n");
      out.write("\t\t\t<br>\r\n");
      out.write("\t\t총 결제 금액(VAT포함)<br>\r\n");
      out.write("\t\t\t\t<input type =\"hidden\" name =\"res_cost\" value =");
      out.print(res_cost);
      out.write(">\r\n");
      out.write("\t\t\t\t");
      out.print(res_cost);
      out.write("원\r\n");
      out.write("\t\t\t<ul>\r\n");
      out.write("\t\t\t\t<li>\r\n");
      out.write("\t\t\t\t해당 객실가는 세금, 봉사료가 포함된 금액입니다.\r\n");
      out.write("\t\t\t\t</li>\r\n");
      out.write("\t\t\t\t<li>\r\n");
      out.write("\t\t\t\t결제완료 후 예약자 이름으로 바로 체크인 하시면됩니다.\r\n");
      out.write("\t\t\t\t</li>\r\n");
      out.write("\t\t\t</ul>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<button type=\"submit\" id = \"b\"><!-- 결제하기 버튼을 눌러주면 사용자 아이디, 예약자이름, 예약자번호,예약일, 결제방식, 숙소이름, 숙소가격을 reservationCreateDB.jsp로 보내준다 -->\r\n");
      out.write("\t결제하기\r\n");
      out.write("\t</button>\r\n");
      out.write("\t</form>\t\t\t\r\n");
      out.write("\t");
} 
      out.write("\r\n");
      out.write("</nav>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
